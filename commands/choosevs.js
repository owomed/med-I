const { EmbedBuilder, SlashCommandBuilder } = require('discord.js');

module.exports = {
    // Prefix komutlarÄ± iÃ§in ad ve takma ad
    name: 'choosevs',
    aliases: ['choosevs'],
    
    // Slash Komut verileri (2 veya daha fazla kullanÄ±cÄ± iÃ§in)
    data: new SlashCommandBuilder()
        .setName('choosevs')
        .setDescription('En az iki kullanÄ±cÄ±ya Choosevs rolÃ¼ verir/alÄ±r.')
        .addUserOption(option =>
            option.setName('kullanÄ±cÄ±1')
                .setDescription('Birinci kullanÄ±cÄ±')
                .setRequired(true))
        .addUserOption(option =>
            option.setName('kullanÄ±cÄ±2')
                .setDescription('Ä°kinci kullanÄ±cÄ±')
                .setRequired(true))
        .addUserOption(option =>
            option.setName('kullanÄ±cÄ±3')
                .setDescription('ÃœÃ§Ã¼ncÃ¼ kullanÄ±cÄ±')
                .setRequired(false))
        .addUserOption(option =>
            option.setName('kullanÄ±cÄ±4')
                .setDescription('DÃ¶rdÃ¼ncÃ¼ kullanÄ±cÄ±')
                .setRequired(false))
        .addUserOption(option =>
            option.setName('kullanÄ±cÄ±5')
                .setDescription('BeÅŸinci kullanÄ±cÄ±')
                .setRequired(false))
        .addUserOption(option =>
            option.setName('kullanÄ±cÄ±6')
                .setDescription('AltÄ±ncÄ± kullanÄ±cÄ±')
                .setRequired(false)),
    
    async execute(client, interactionOrMessage, args) {
        // ---- Komutun BaÅŸlangÄ±cÄ± ----
        const allowedRoleID = '1238576058119487539';
        const targetRoleID = '1247597661666672700';
        
        let membersToProcess = [];
        let isSlashCommand = interactionOrMessage.isCommand?.();

        // Slash komutu ise yanÄ±tÄ± ertele
        if (isSlashCommand) {
            await interactionOrMessage.deferReply({ ephemeral: false });
            for (let i = 1; i <= 6; i++) {
                const member = interactionOrMessage.options.getMember(`kullanÄ±cÄ±${i}`);
                if (member) membersToProcess.push(member);
            }
        } else {
            membersToProcess = Array.from(interactionOrMessage.mentions.members.values());
        }
        
        const authorMember = interactionOrMessage.member;
        if (!authorMember || !authorMember.roles.cache.has(allowedRoleID)) {
            const embed = new EmbedBuilder()
                .setColor('Red')
                .setDescription('`Bu komutu kullanma yetkiniz bulunmamaktadÄ±r.`');
            return isSlashCommand
                ? await interactionOrMessage.editReply({ embeds: [embed] })
                : await interactionOrMessage.reply({ embeds: [embed] });
        }
        
        if (membersToProcess.length < 2) {
            const embed = new EmbedBuilder()
                .setColor('Red')
                .setDescription('`LÃ¼tfen en az iki geÃ§erli kullanÄ±cÄ± etiketleyin.`');
            return isSlashCommand
                ? await interactionOrMessage.editReply({ embeds: [embed] })
                : await interactionOrMessage.reply({ embeds: [embed] });
        }
        
        // Rol verme/alma iÅŸlemleri iÃ§in sonucu tutacak dizi
        let results = [];
        
        const targetRole = interactionOrMessage.guild.roles.cache.get(targetRoleID);
        if (!targetRole) {
            const errorEmbed = new EmbedBuilder()
                .setColor('Red')
                .setDescription('Hedef rol bulunamadÄ±. LÃ¼tfen yÃ¶neticilerinizle iletiÅŸime geÃ§in.');
            return isSlashCommand
                ? await interactionOrMessage.editReply({ embeds: [errorEmbed] })
                : await interactionOrMessage.reply({ embeds: [errorEmbed] });
        }

        // KullanÄ±cÄ±lar Ã¼zerinde iÅŸlem yapma
        for (const member of membersToProcess) {
            try {
                if (member.roles.cache.has(targetRoleID)) {
                    await member.roles.remove(targetRoleID);
                    results.push(`ğŸŸ¢ **${member.user.tag}** kullanÄ±cÄ±sÄ±ndan rol alÄ±ndÄ±.`);
                } else {
                    await member.roles.add(targetRoleID);
                    results.push(`<:check:1407066920686981230> **${member.user.tag}** kullanÄ±cÄ±sÄ±na rol verildi.`);
                }
            } catch (err) {
                console.error(`Rol iÅŸlemi hatasÄ±: ${member.user.tag}`, err);
                results.push(`ğŸ”´ **${member.user.tag}** kullanÄ±cÄ±sÄ±na rol verilemedi: \`${err.message}\``);
            }
        }
        
        // SonuÃ§larÄ± gÃ¶steren embed'i oluÅŸtur
        const finalEmbed = new EmbedBuilder()
            .setColor('Green')
            .setTitle('`Choosevs` Rol GÃ¼ncelleme SonuÃ§larÄ±')
            .setDescription(results.join('\n'));

        // --- DÃœZELTÄ°LEN SON SATIR ---
        if (isSlashCommand) {
            await interactionOrMessage.editReply({ embeds: [finalEmbed] });
        } else {
            await interactionOrMessage.reply({ embeds: [finalEmbed] });
        }
    },
};
